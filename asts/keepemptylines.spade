struct Foo {
    a: int<4>,



    b: int<4>
}

enum Bar {
    A {
        a: int<4>,


        b: int<4>
    }
}

mod foo {

    struct Foo {

        a: int<4>,



        b: int<4>

    }

    enum Bar {

        A {
            a: int<4>,


            b: int<4>
        }


    ,

    B { a: int<4>



    ,




b: int<4>}

    }

}

impl Rv<uint<16>> {

    entity split_to_u8(self, clk: clock, rst: bool) -> Rv<uint<8>> {
        let ds = inst new_mut_wire();


        reg(clk) state reset(rst: U8SplitState::Empty) =
// this one shouldn't be kept:
        
            match (state, inst read_mut_wire(ds), *self.data) {
                (U8SplitState::Empty, _, None) => U8SplitState::Empty,

                (
                    U8SplitState::Half(val),
                    true,

                    Some(data)
                ) => U8SplitState::Full(data),
        };

    }

}
